#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

#define MAX_NODES 100
#define MAX_DEGREE 100

int graph[MAX_NODES][MAX_DEGREE];
int degree[MAX_NODES] = {0};

void add_edge(int u, int v) {
    graph[u][degree[u]++] = v;
    graph[v][degree[v]++] = u;
}

void bfs(int start, int end, int num_nodes) {
    bool visited[MAX_NODES] = {false};
    int parent[MAX_NODES];
    int queue[MAX_NODES];
    int front = 0, rear = 0;

    for (int i = 0; i < num_nodes; i++) {
        parent[i] = -1;
    }

    visited[start] = true;
    queue[rear++] = start;

    while (front < rear) {
        int node = queue[front++];

        for (int i = 0; i < degree[node]; i++) {
            int neighbor = graph[node][i];
            if (!visited[neighbor]) {
                visited[neighbor] = true;
                parent[neighbor] = node;
                queue[rear++] = neighbor;

                if (neighbor == end) {
                    front = rear;  // Early exit
                    break;
                }
            }
        }
    }

    if (!visited[end]) {
        printf("No path\n");
        return;
    }

    // Reconstruct path
    int path[MAX_NODES];
    int path_len = 0;
    int current = end;
    while (current != -1) {
        path[path_len++] = current;
        current = parent[current];
    }

    printf("Shortest path from %d to %d (length %d): ", start, end, path_len - 1);
    for (int i = path_len - 1; i >= 0; i--) {
        printf("%d ", path[i]);
    }
    printf("\n");
}

int main() {
    int num_nodes = 5;

    add_edge(0, 1); // a-b
    add_edge(0, 3); // a-d
    add_edge(0, 4); // a-e
    add_edge(1, 3); // b-d
    add_edge(1, 4); // b-e
    add_edge(2, 3); // c-d

    bfs(0, 1, num_nodes);  // Try changing to bfs(0, 2, num_nodes) as well

    return 0;
}

